ellipses = TRUE # show correlation ellipses
)
pairs.panels(economics[,c("pce", "pop", "psavert", "uempmed")],
method = "pearson", # correlation method
density = TRUE,  # show density plots
ellipses = TRUE # show correlation ellipses
)
pairs.panels(economics[,c("pce", "pop", "psavert", "uempmed")],
method = "pearson", # correlation method
hist.col = "blue",
density = FALSE,  # show density plots
ellipses = TRUE # show correlation ellipses
)
pairs.panels(economics[,c("pce", "pop", "psavert", "uempmed")],
method = "pearson", # correlation method
hist.col = "blue",
density = TRUE,  # show density plots
ellipses = TRUE # show correlation ellipses
)
require(psych)
density = TRUE  # show density plots)
pairs.panels(economics[,c("pce", "pop", "psavert", "uempmed")],
method = "pearson",
hist.col = "blue")
#Saving Rate
p <- ggplot(economics, aes(sample = psavert))
qq1 <- p + stat_qq() + stat_qq_line() + ggtitle("Savings vs. Normal")
#Unemployment
p <- ggplot(economics, aes(sample = unemploy))
qq2 <- p + stat_qq() + stat_qq_line() + ggtitle("Unemployment vs. Normal")
#Juxtapose
grid.arrange(qq1, qq2, ncol = 2)
#Base data for plot
p = ggplot(economics,
aes(x = uempmed, y = psavert))
##Scatter plot
p1 <- p + geom_point() +
ggtitle("(a) Traditional scatter") +
xlab("Unemployment Rate") + ylab("Personal Savings Rate")
##Scatter plot with transparency
p2 <- p + geom_point(alpha = 0.4, colour="navy") +
ggtitle("(b) Scatter (alpha = 0.4)") +
xlab("Unemployment Rate") + ylab("Personal Savings Rate")
#Arrange graphs
grid.arrange(p1, p2, ncol = 2)
#Base data for plot
p = ggplot(economics,
aes(x = pce, y = pop))
##Scatter plot
p1 <- p + geom_point() +
ggtitle("(a) Traditional scatter") +
xlab("Unemployment Rate") + ylab("Personal Savings Rate")
##Scatter plot with transparency
p2 <- p + geom_point(alpha = 0.4, colour="navy") +
ggtitle("(b) Scatter (alpha = 0.4)") +
xlab("Unemployment Rate") + ylab("Personal Savings Rate")
#Arrange graphs
grid.arrange(p1, p2, ncol = 2)
#Base data for plot
p = ggplot(economics,
aes(x = diff(pce), y = diff(pop)))
##Scatter plot
p1 <- p + geom_point() +
ggtitle("(a) Traditional scatter") +
xlab("Unemployment Rate") + ylab("Personal Savings Rate")
##Scatter plot with transparency
p2 <- p + geom_point(alpha = 0.4, colour="navy") +
ggtitle("(b) Scatter (alpha = 0.4)") +
xlab("Unemployment Rate") + ylab("Personal Savings Rate")
#Arrange graphs
grid.arrange(p1, p2, ncol = 2)
plot(diff(economics$pce), diff(economics$pop))
#Extract residual and re-scale as z-score
economics$resid <- c(NA, diff(economics$psavert))
ggplot(economics) +
geom_line(aes(date, resid), colour = "blue") +
geom_hline(yintercept = c(-3, 3), linetype = "dashed") +
ylab("Z-Score")
#Extract residual and re-scale as z-score
economics$resid <- scale(diff(log(economics$psavert)))
#Extract residual and re-scale as z-score
economics$resid <- c(NA,scale(diff(log(economics$psavert))))
ggplot(economics) +
geom_line(aes(date, resid), colour = "blue") +
geom_hline(yintercept = c(-3, 3), linetype = "dashed") +
ylab("Z-Score")
ggplot(economics) +
geom_line(aes(date, resid), colour = "blue") +
geom_hline(yintercept = c(-3, 3), linetype = "dashed") +
ylab("Z-Score")
#Extract residual and re-scale as z-score
economics$resid <- scale(economics$psavert - local_trend)
ggplot(economics) +
geom_line(aes(date, resid), colour = "blue") +
geom_hline(yintercept = c(-3, 3), linetype = "dashed") +
ylab("Z-Score")
#Extract residual and re-scale as z-score
economics$detrend <- scale(economics$psavert - local_trend)
#Product input variable
economics$differenced <- c(NA, diff(economics$psavert))
#Product input variable
economics$differenced <- scale(c(NA, diff(economics$psavert)))
ggplot(economics) +
geom_line(aes(date, detrend), colour = "blue") +
geom_line(aes(date, differenced), colour = "red") +
geom_hline(yintercept = c(-3, 3), linetype = "dashed") +
ylab("Z-Score")
ggplot(economics) +
geom_line(aes(date, detrend), colour = "blue") +
geom_line(aes(date, detrend), colour = "orange") +
geom_hline(yintercept = c(-3, 3), linetype = "dashed") +
ylab("Z-Score")
ggplot(economics) +
geom_line(aes(date, detrend), colour = "blue") +
geom_line(aes(date, differenced), colour = "orange") +
geom_hline(yintercept = c(-3, 3), linetype = "dashed") +
ylab("Z-Score")
#Set data
p <- ggplot(economics) +
geom_hline(yintercept = c(-3, 3), linetype = "dashed") +
ylab("Z-Score")
#Plot model-based
d1 <- p + geom_line(aes(date, detrend), colour = "blue") +
ggtitle("Model-based")
#Plot differenced
d2 <- p + geom_line(aes(date, differenced), colour = "orange") +
ggtitle("Model-based")
grid.arrange(d1, d2, ncol = 2)
#Set data
p <- ggplot(economics) +
geom_hline(yintercept = c(-3, 3), linetype = "dashed") +
ylab("Z-Score") + ylim(c(-5,5))
#Plot model-based
d1 <- p + geom_line(aes(date, detrend), colour = "blue") +
ggtitle("Model-based")
#Plot differenced
d2 <- p + geom_line(aes(date, differenced), colour = "orange") +
ggtitle("Differenced")
#Juxtapose
grid.arrange(d1, d2, ncol = 2)
#Difference and add NA placeholder
temp <- c(NA, diff(economics$psavert))
#Rescale and add to economics data frame
economics$differenced <- scale(temp)
#Set data
p <- ggplot(economics) +
geom_hline(yintercept = c(-3, 3), linetype = "dashed") +
ylab("Z-Score") + ylim(c(-5,5))
#Plot model-based
d1 <- p + geom_line(aes(date, detrend), colour = "blue") +
ggtitle("Model-based")
#Plot differenced
d2 <- p + geom_line(aes(date, differenced), colour = "orange") +
ggtitle("Differenced")
#Juxtapose
grid.arrange(d1, d2, ncol = 2)
#Set data, z-score thresholds, label and y-axis range
p <- ggplot(economics) +
geom_hline(yintercept = c(-3, 3), linetype = "dashed") +
ylab("Z-Score") + ylim(c(-5,5)) +
theme(plot.title = element_text(size=10))
#Plot model-based
d1 <- p + geom_line(aes(date, detrend), colour = "blue") +
ggtitle("Model-based")
#Plot differenced
d2 <- p + geom_line(aes(date, differenced), colour = "orange") +
ggtitle("Differenced")
#Juxtapose
grid.arrange(d1, d2, ncol = 2)
#Plot model-based
d1 <- p + geom_line(aes(date, detrend), colour = "blue", alpha = 0.5) +
ggtitle("Model-based")
d1
#Plot model-based
p + geom_line(aes(date, detrend), colour = "blue", alpha = 0.5) +
geom_line(aes(date, differenced), colour = "orange", alpha = 0.5) +
ggtitle("Model-based")
#Plot model-based
p + geom_line(aes(date, detrend), colour = "blue", alpha = 0.5) +
geom_line(aes(date, differenced), colour = "orange", alpha = 0.5) +
ggtitle("Model-based")
#Plot model-based
p + geom_line(aes(date, detrend), colour = "blue", alpha = 0.5) +
geom_line(aes(date, differenced), colour = "orange", alpha = 0.8) +
ggtitle("Model-based")
#Set data, z-score thresholds, label and y-axis range
p <- ggplot(economics) +
geom_hline(yintercept = c(-3, 3), linetype = "dashed") +
ylab("Z-Score") + ylim(c(-5,5)) +
theme(plot.title = element_text(size=10))
#Plot overlay of detrended and differenced
p + geom_line(aes(date, detrend), colour = "blue", alpha = 0.5) +
geom_line(aes(date, differenced), colour = "orange", alpha = 0.8) +
ggtitle("Model-based")
ts1 <- ts(economics$psavert, frequency = 12)
autoplot(acf(ts1, plot = FALSE))
pacman::p_load(ggfortify)
ts1 <- ts(economics$psavert, frequency = 12)
autoplot(acf(ts1, plot = FALSE))
#Base data for plot
p = ggplot(economics,
aes(x = diff(log(pce)), y = diff(log(pop))))
p + geom_point(alpha = 0.4, colour="navy") +
ggtitle("(b) Scatter (alpha = 0.4)") +
xlab("PCE") + ylab("Population")
#Base data for plot
p = ggplot(economics,
aes(x = diff(log(pce)), y = diff(log(pop))))
p + geom_point(alpha = 0.4, colour="navy") +
ggtitle("(b) Scatter (alpha = 0.4)") +
xlab("PCE") + ylab("Population")
#Base data for plot
p = ggplot(economics,
aes(x = diff((pce)), y = diff((pop))))
p + geom_point(alpha = 0.4, colour="navy") +
ggtitle("(b) Scatter (alpha = 0.4)") +
xlab("PCE") + ylab("Population")
#Base data for plot
p = ggplot(economics,
aes(x = diff(pce), y = diff(pop)))
p + geom_point(alpha = 0.4, colour="navy") +
xlab("PCE") + ylab("Population")
#Base data for plot
ggplot(economics,
aes(x = diff(pce), y = diff(pop))) +
geom_point(alpha = 0.4, colour="navy") +
xlab("PCE") + ylab("Population")
#Create random case
set.seed(9)
df <- data.frame(rand = runif(nrow(economics)))
#Prep and store plots
h0 <- ggplot(df, aes(rand))  + ggtitle("(a) No signal") +
geom_histogram(colour =  FALSE, fill = "blue") +
theme(plot.title = element_text(size=10))
h1 <- ggplot(economics, aes(psavert))  + ggtitle("(b) Personal Savings Rate") +
geom_histogram(colour = FALSE, fill = "blue") +
theme(plot.title = element_text(size=10))
h2 <- ggplot(economics, aes(uempmed))  + ggtitle("(c) Unemployment Rate") +
geom_histogram(colour = FALSE, fill = "blue")+
theme(plot.title = element_text(size=10))
h3 <- ggplot(economics, aes(pop))  + ggtitle("(d) Population") +
geom_histogram(colour = FALSE, fill = "blue")+
theme(plot.title = element_text(size=10))
#Juxtapose
grid.arrange(h0, h1, h2, h3, ncol = 2)
require(gridExtra)
#Graphs
h1 <- p + geom_histogram(aes(uempmed), colour = FALSE, fill = "blue")  + ggtitle("Histogram")  +
theme(plot.title = element_text(size=10))
k1 <- p + geom_density(aes(uempmed), colour = FALSE, fill = "blue") + ggtitle("Kernel Density") +
theme(plot.title = element_text(size=10))
#Juxtapose
grid.arrange(h1, k1, ncol = 2)
library(ggplot2)
library(digIt)
temp <- digIt("accel_exercise")
temp$accel <- sqrt(temp$user_acc_x.G^2 + temp$user_acc_y.G^2 + temp$user_acc_z.G^2)
temp <- temp[!is.na(temp$accel) & temp$accel!="",]
temp_val <- temp[,c("timestamp.unix","accel")]
colnames(temp_val) <- c("time","accel")
temp_val$time <- temp_val$time - min(temp_val$time)
temp_val <- temp_val[order(temp_val$time),]
temp_val[,1] <- as.POSIXct(as.numeric(as.character(temp_val[,1])), origin="2016-01-01")
ggplot(temp_val,aes(x=time, y= accel  ))  + geom_point(size = 0.01) +
geom_line(colour = "navy", size = 0.1) + ylim(0, 1)
library(ggplot2)
library(gridExtra)
idle <- temp_val[700:1000,]
walk <- temp_val[2600:2800,]
run <- temp_val[5100:5300,]
stairs <- temp_val[8000:8200,]
p = ggplot(idle,aes(x=1:nrow(idle), y= accel  ))  + geom_point(size = 1) +
geom_line(colour = "navy") +
ylim(0, 1) + ggtitle(paste("Idle: mu = ", round(mean(idle[,2]),2),", +/- = ",round(sd(idle[,2])*1.96,2),", max = ",round(max(idle[,2]),2))) + theme(plot.title = element_text(size = 10))
p1 = ggplot(walk,aes(x=1:nrow(walk), y= accel  ))  + geom_point(size = 1) + geom_line(colour = "navy") + ylim(0, 1) + ggtitle(paste("Walk: mu = ", round(mean(walk[,2]),2),", +/- = ",round(sd(walk[,2])*1.96,2),", max = ",round(max(walk[,2]),2)))+ theme(plot.title = element_text(size = 10))
p2 = ggplot(run,aes(x=1:nrow(run), y= accel  ))  + geom_point(size = 1) + geom_line(colour = "navy") + ylim(0, 1) + ggtitle(paste("Run: mu = ", round(mean(run[,2]),2),", +/- = ",round(sd(run[,2])*1.96,2),", max = ",round(max(run[,2]),2)))+ theme(plot.title = element_text(size = 10))
p3 = ggplot(stairs,aes(x=1:nrow(stairs), y= accel  ))  + geom_point(size = 1) + geom_line(colour = "navy") + ylim(0, 1) + ggtitle(paste("Descend Stairs: mu = ", round(mean(stairs[,2]),2),", +/- = ",round(sd(stairs[,2])*1.96,2),", max = ",round(max(stairs[,2]),2)))+ theme(plot.title = element_text(size = 10))
grid.arrange(p,p1,p2,p3, ncol=2)
examp <- read.csv("data/goals_desc.csv")
colnames(examp) <- c("Objective", "Common Questions")
pander::pander(examp, justify = "left",
caption = "Questions that an EDA process should answer.")
#Load package
pacman::p_load(ggplot2)
p <- ggplot(economics)
#Create random case
set.seed(9)
df <- data.frame(rand = runif(nrow(economics)))
#Prep and store plots
h0 <- ggplot(df, aes(rand))  + ggtitle("(a) No signal") +
geom_histogram(colour =  FALSE, fill = "blue") +
theme(plot.title = element_text(size=10))
h1 <- ggplot(economics, aes(psavert))  + ggtitle("(b) Personal Savings Rate") +
geom_histogram(colour = FALSE, fill = "blue") +
theme(plot.title = element_text(size=10))
h2 <- ggplot(economics, aes(uempmed))  + ggtitle("(c) Unemployment Rate") +
geom_histogram(colour = FALSE, fill = "blue")+
theme(plot.title = element_text(size=10))
h3 <- ggplot(economics, aes(pop))  + ggtitle("(d) Population") +
geom_histogram(colour = FALSE, fill = "blue")+
theme(plot.title = element_text(size=10))
#Juxtapose
grid.arrange(h0, h1, h2, h3, ncol = 2)
require(gridExtra)
#Graphs
h1 <- p + geom_histogram(aes(uempmed), colour = FALSE, fill = "blue")  + ggtitle("Histogram")  +
theme(plot.title = element_text(size=10))
k1 <- p + geom_density(aes(uempmed), colour = FALSE, fill = "blue") + ggtitle("Kernel Density") +
theme(plot.title = element_text(size=10))
#Juxtapose
grid.arrange(h1, k1, ncol = 2)
require(gridExtra)
#Graphs
h1 <- p + geom_histogram(aes(uempmed), colour = FALSE, fill = "blue")  + ggtitle("Histogram")  +
theme(plot.title = element_text(size=10)) + scale_x_log10()
k1 <- p + geom_density(aes(uempmed), colour = FALSE, fill = "blue") + ggtitle("Kernel Density") +
theme(plot.title = element_text(size=10)) + scale_x_log10()
#Juxtapose
grid.arrange(h1, k1, ncol = 2)
#Line graph
l1 <- p +  geom_line(aes(date, psavert), colour = "blue") +
ggtitle("Line Plot")
#Area graph
a1 <- p +  geom_area(aes(date, psavert), fill = "blue")  +
ggtitle("Area Plot")
grid.arrange(l1, a1, ncol = 2)
#Product input variable
economics$date.index <- as.numeric(economics$date)
#Estimate loess, then predict the trend
local_trend <- predict(loess(psavert ~ date.index, data = economics))
#Extract residual and re-scale as z-score
economics$detrend <- scale(economics$psavert - local_trend)
#Difference and add NA placeholder
temp <- c(NA, diff(economics$psavert))
#Rescale and add to economics data frame
economics$differenced <- scale(temp)
#Set data, z-score thresholds, label and y-axis range
p <- ggplot(economics) +
geom_hline(yintercept = c(-3, 3), linetype = "dashed") +
ylab("Z-Score") + ylim(c(-5,5)) +
theme(plot.title = element_text(size=10))
#Plot overlay of detrended and differenced
p + geom_line(aes(date, detrend), colour = "blue", alpha = 0.5) +
geom_line(aes(date, differenced), colour = "orange", alpha = 0.8) +
ggtitle("Model-based")
pacman::p_load(ggfortify)
ts1 <- ts(economics$psavert, frequency = 12)
autoplot(acf(ts1, plot = FALSE))
pacman::p_load(ggfortify)
ts1 <- ts(economics$psavert, frequency = 12)
autoplot(acf(ts1, plot = FALSE))
#Saving Rate
p <- ggplot(economics, aes(sample = psavert))
qq1 <- p + stat_qq() + stat_qq_line() + ggtitle("Savings vs. Normal")
#Unemployment
p <- ggplot(economics, aes(sample = unemploy))
qq2 <- p + stat_qq() + stat_qq_line() + ggtitle("Unemployment vs. Normal")
#Juxtapose
grid.arrange(qq1, qq2, ncol = 2)
#Base data for plot
p = ggplot(economics,
aes(x = pce, y = pop))
##Scatter plot
p1 <- p + geom_point() +
ggtitle("(a) Traditional scatter") +
xlab("PCE") + ylab("Population")
##Scatter plot with transparency
p2 <- p + geom_point(alpha = 0.4, colour="navy") +
ggtitle("(b) Scatter (alpha = 0.4)") +
xlab("PCE") + ylab("Population")
#Arrange graphs
grid.arrange(p1, p2, ncol = 2)
#Base data for plot
p = ggplot(economics,
aes(x = uempmed, y = psavert))
##Scatter plot
p1 <- p + geom_point() +
ggtitle("(a) Traditional scatter") +
xlab("PCE") + ylab("Population")
##Scatter plot with transparency
p2 <- p + geom_point(alpha = 0.4, colour="navy") +
ggtitle("(b) Scatter (alpha = 0.4)") +
xlab("PCE") + ylab("Population")
#Arrange graphs
grid.arrange(p1, p2, ncol = 2)
#Base data for plot
ggplot(economics,
aes(x = diff(pce), y = diff(pop))) +
geom_point(alpha = 0.4, colour="navy") +
xlab("PCE") + ylab("Population")
#Take difference
df <- data.frame(pce = diff(economics$pce),
pop = diff(economics$pop))
#Base data for plot
ggplot(df,
aes(x = pce, y = pop)) +
geom_point(alpha = 0.4, colour="navy") +
xlab("PCE") + ylab("Population")
#Levels
l1 <- p + geom_point(alpha = 0.4, colour="navy") +
xlab("PCE") + ylab("Population") +
ggtitle("")
l1
#Levels
l1 <- ggplot(economics,
aes(x = pop, y = pce)) +
geom_point(alpha = 0.4, colour="navy") +
xlab("PCE") + ylab("Population") +
ggtitle("")
#Levels
l1 <- ggplot(economics,
aes(x = pop, y = pce)) +
geom_point(alpha = 0.4, colour="navy") +
xlab("PCE") + ylab("Population") +
ggtitle("Levels")
#Differences
d1 <- ggplot(df, aes(x = pop, y = pce)) +
geom_point(alpha = 0.4, colour="navy") +
xlab("PCE") + ylab("Population") +
ggtitle("Differenced")
#Arrange graphs
grid.arrange(l1, d1, ncol = 2)
#Take difference
df <- data.frame(pce = diff(economics$pce),
pop = diff(economics$pop))
#Levels
l1 <- ggplot(economics, aes(x = pop, y = pce)) +
geom_point(alpha = 0.4, colour="navy") +
ylab("PCE") + xlab("Population") +
ggtitle("Levels")
#Differences
d1 <- ggplot(df, aes(x = pop, y = pce)) +
geom_point(alpha = 0.4, colour="navy") +
ylab("PCE") + xlab("Population") +
ggtitle("Differenced")
#Arrange graphs
grid.arrange(l1, d1, ncol = 2)
#Take difference
df <- data.frame(pce = diff(economics$pce),
pop = diff(economics$pop))
#Levels
l1 <- ggplot(economics, aes(x = pop, y = pce)) +
geom_point(alpha = 0.4, colour="navy") +
ylab("PCE") + xlab("Population") +
ggtitle("Levels")
#Differences
d1 <- ggplot(df, aes(x = pop, y = pce)) +
geom_point(alpha = 0.4, colour="navy") +
ylab("PCE") + xlab("Population") +
ggtitle("Differenced")
#Arrange graphs
grid.arrange(l1, d1, ncol = 2)
#Take difference
df <- data.frame(pce = diff(economics$pce),
pop = diff(economics$pop))
#Levels
l1 <- ggplot(economics, aes(x = pop, y = pce)) +
geom_point(alpha = 0.4, colour="navy") +
ylab("PCE") + xlab("Population") +
ggtitle("Levels")+
theme(plot.title = element_text(size=10))
#Differences
d1 <- ggplot(df, aes(x = pop, y = pce)) +
geom_point(alpha = 0.4, colour="navy") +
ylab("PCE") + xlab("Population") +
ggtitle("Differenced") +
theme(plot.title = element_text(size=10))
#Arrange graphs
grid.arrange(l1, d1, ncol = 2)
cor(df)
?pairs.panels
pacman::p_load(psych)
pairs.panels(economics[,c("pce", "pop", "psavert", "uempmed")],
method = "pearson",
hist.col = "blue")
?autoplot
?acf
pacman::p_load(ggfortify)
ts1 <- ts(economics$psavert, frequency = 12)
autoplot(acf(ts1, plot = FALSE))
ts1 <- ts(economics$pop, frequency = 12)
autoplot(acf(ts1, plot = FALSE))
ts1 <- ts(economics$pce, frequency = 12)
autoplot(acf(ts1, plot = FALSE))
ts1 <- ts(economics$unemploy, frequency = 12)
autoplot(acf(ts1, plot = FALSE))
#Set time series object
ts1 <- ts(diff(economics$unemploy), frequency = 12)
#Render stylized plot of the acf function
autoplot(acf(ts1, plot = FALSE))
#Set time series object
ts1 <- ts(economics$unemploy, frequency = 12)
#Render stylized plot of the acf function
autoplot(pacf(ts1, plot = FALSE))
#Set time series object
ts1 <- ts(economics$pce, frequency = 12)
#Render stylized plot of the acf function
autoplot(pacf(ts1, plot = FALSE))
#Set time series object
ts1 <- ts(economics$psavert, frequency = 12)
#Render stylized plot of the acf function
autoplot(pacf(ts1, plot = FALSE))
#Set time series object
ts1 <- ts(economics$psavert, frequency = 12)
#Render stylized plot of the acf function
acf(ts1)
#Render stylized plot of the acf function
acf(ts1, title = FALSE)
#Render stylized plot of the acf function
acf(ts1)
#Render stylized plot of the acf function
pacf(ts1, plot = FALSE)
